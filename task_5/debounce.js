// 1. Функция debounce
// Напишите функцию debounce. Эта функция должна гарантировать, что данная
// функция не вызывается слишком часто. При вызове она должна ожидать
// определенное количество времени перед выполнением. Если функция вызывается
// снова в течение этого времени, таймер должен быть сброшен.

const debounce = (func, delay) => {
  let timeoutId; // Идентификатор таймера

  return (...args) => {
    // Сбрасываем предыдущий таймер
    if (timeoutId) {
      clearTimeout(timeoutId);
    }

    // Устанавливаем новый таймер
    timeoutId = setTimeout(() => {
      func(...args); // Вызываем функцию с переданными аргументами
    }, delay);
  };
};

// Пример использования
const debouncedFunction = debounce(() => {
  console.log('Вызвана функция с задержкой');
}, 2000);

debouncedFunction(); // Запускает таймер
debouncedFunction(); // Этот вызов должен сбросить таймер и предотвратить мгновенный вызов функции.
